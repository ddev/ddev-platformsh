name: ddev-platformsh

pre_install_actions:
    # Make sure we have a ddev version that can support what we do here
  - |
    #ddev-nodisplay
    (ddev debug capabilities | grep migrate-database >/dev/null) || (echo "Please upgrade ddev to v1.21.1+ for appropriate capabilities" && false)

  # Get PLATFORMSH_CLI_TOKEN from user if we don't have it yet
  - |
    #ddev-nodisplay
    if ( {{ contains "PLATFORMSH_CLI_TOKEN" (list .DdevGlobalConfig.web_environment | toString) }} || {{ contains "PLATFORMSH_CLI_TOKEN" (list .DdevProjectConfig.web_environment | toString) }} ); then
      echo "Using existing PLATFORMSH_CLI_TOKEN."
    else
      printf "Please enter your platform.sh token: "
    fi

  - |
    #ddev-nodisplay
    if !( {{ contains "PLATFORMSH_CLI_TOKEN" (list .DdevGlobalConfig.web_environment | toString) }} || {{ contains "PLATFORMSH_CLI_TOKEN" (list .DdevProjectConfig.web_environment | toString) }} ); then
      read token
      # Put the token in to the project web environment
      ddev config --web-environment-add PLATFORMSH_CLI_TOKEN=${token}
      echo "PLATFORMSH_CLI_TOKEN set for project"
    fi

  # Get PLATFORM_PROJECT from user if we don't have it yet
  - |
    #ddev-nodisplay
    # echo 'list ddevprojectconfig.web_environment={{ list .DdevProjectConfig.web_environment | toString }}'
    if ({{ contains "PLATFORM_PROJECT=" (list .DdevProjectConfig.web_environment | toString) }} ); then
      echo "Using existing PLATFORM_PROJECT from project config.yaml."
    else
      printf "Please enter your platform.sh project ID (like '6k4ypl5iendqd'): "
    fi

  - |
    #ddev-nodisplay
    if !( {{ contains "PLATFORM_PROJECT" (list .DdevProjectConfig.web_environment | toString) }} ); then
      read platform_project
      echo "platform_project = '${platform_project}'"
      # Put the platform_project in to the project's web environment
      ddev config --web-environment-add PLATFORM_PROJECT=${platform_project}
      echo "PLATFORM_PROJECT set to ${platform_project}"
    fi
    
    # Add PLATFORM_APPLICATION_NAME from .platformapp.name
    # This should be moved elsewhere after config.yaml environment variables can be merged
    # see ddev v1.20.0
  - |
    #ddev-nodisplay
    if !( {{ contains "PLATFORM_APPLICATION_NAME" (list .DdevProjectConfig.web_environment | toString) }} ); then
      # Put the platform_project in to the project's web environment
      ddev config --web-environment-add PLATFORM_APPLICATION_NAME={{ .platformapp.name }}
    fi

  # Get PLATFORM_ENVIRONMENT from user if we don't have it
  - |
    #ddev-nodisplay
    # echo 'list ddevprojectconfig.web_environment={{ list .DdevProjectConfig.web_environment | toString }}'
    if ({{ contains "PLATFORM_ENVIRONMENT=" (list .DdevProjectConfig.web_environment | toString) }} ); then
      echo "Using existing PLATFORM_ENVIRONMENT from project config.yaml."
    else
      printf "Please enter your platform.sh project environment (like 'main'): "
    fi

  - |
    #ddev-nodisplay
    if !( {{ contains "PLATFORM_ENVIRONMENT" (list .DdevProjectConfig.web_environment | toString) }} ); then
      read PLATFORM_ENVIRONMENT
      # Put the PLATFORM_ENVIRONMENT in to the project's web environment
      ddev config --web-environment-add PLATFORM_ENVIRONMENT=${PLATFORM_ENVIRONMENT}
    fi
    
    # We don't want to allow new config if they're changing database types from what is currently there.
  - |
      #ddev-nodisplay
      {{ $dbtype := "" }}
      {{ if .platformapp.relationships.database }}
      {{ $dbheader := index (split ":" .platformapp.relationships.database) "_0" }} 
      {{ $dbtype = replace "postgresql" "postgres" (get (get .services $dbheader) "type") }}
      export upstream_db="{{ regexReplaceAll "oracle-" (regexReplaceAll ":.*$" $dbtype "") "" }}:{{ regexReplaceAll "^.*:" $dbtype "" }}"
      # Unfortunate sed to remove color escape sequences from ddev debug output
      current_db_version="$(ddev debug get-volume-db-version | sed -r 's/\x1b\[[0-9;]*m?//g')" 
      if [ "${current_db_version}" != "" ] && [ ">${upstream_db}<" != ">${current_db_version}<" ]; then
        printf "There is an existing database in this project that doesn\'t match the upstream database type.\n Please use 'ddev delete' to delete the existing database and retry, or try 'ddev debug migrate-database ${upstream_db}' to migrate the database.\n"
        false
      fi
      {{ end }}


# Write a config.platformsh.yaml based on calculated values, php version, database, docroot
  - |
      #ddev-nodisplay
      # set -x
      platform_routes=$(cat <<-"ENDROUTES"
      {
      "${DDEV_PRIMARY_URL}": {
        "primary": true,
        "id": null,
        "production_url": "${DDEV_PRIMARY_URL}",
        "attributes": {},
        "upstream": "drupal",
        "type": "upstream",
        "original_url": "https://{default}/"  }
      }
      ENDROUTES
      )
      PLATFORM_ROUTES="$( if base64 --version >/dev/null 2>&1; then echo -n ${platform_routes} | base64 -w0; else echo -n ${platform_routes} | base64; fi)"
      PLATFORM_PROJECT_ENTROPY="$(echo $RANDOM | shasum -a 256 | awk '{print $1}')"
    
      if [ -f .ddev/config.platformsh.yaml ] && ! grep '#ddev-generated' .ddev/config.platformsh.yaml; then
        echo "Existing .ddev/config.platformsh.yaml does not have #ddev-generated, so can't be updated"
        exit 2
      fi
      rm -f .ddev/config.platformsh.yaml
  
      cat <<-EOF >.ddev/config.platformsh.yaml
      # #ddev-generated
      # Generated configuration based on platform.sh project configuration
      {{ $dbtype := "" }}
      {{ if .platformapp.relationships.database }}
      {{ $dbheader := index (split ":" .platformapp.relationships.database) "_0" }} 
      {{ $dbtype = replace "postgresql" "postgres" (get (get .services $dbheader) "type") }}
      {{ end }}
      {{ $phpversion := trimPrefix "php:" .platformapp.type }}
      php_version: {{ $phpversion }}
      {{ if .platformapp.relationships.database }}
      database:
        type: {{ regexReplaceAll "oracle-" (regexReplaceAll ":.*$" $dbtype "") "" }}
        version: {{ regexReplaceAll "^.*:" $dbtype "" }}
      {{ end }}
      docroot: {{ dig "web" "locations" "/" "root" "notfound" .platformapp }}
      web_environment:
      # TODO: Review which of these matters and which can be dummied up
      - "PLATFORM_MOUNTS={{ range $key, $value := .platformapp.mounts }}{{ $key }} {{ end }}"
      - "PLATFORM_APP_DIR=/var/www/html"
      - "PLATFORM_PROJECT_ENTROPY=${PLATFORM_PROJECT_ENTROPY}"
      # Consider commit hash for PLATFORM_TREE_ID
      - "PLATFORM_TREE_ID=2dc356f2fea13ef683f9adc5fc5bd28e05ad992a"
      - "PLATFORM_DIR=/var/www/html"
      - "PLATFORM_ROUTES=${PLATFORM_ROUTES}"
      - "PLATFORM_VARIABLES=e30="
      - "PATH=$PATH:/var/www/html/.global/bin"
      {{ if .platformapp.variables.env }}
      {{ range $key, $value := .platformapp.variables.env }}
      - "{{$key}}={{$value}}"{{ end }}{{ end }}
      # Provide all PHP extensions but blackfire, which has different pattern (blackfire-php) and is already installed
      # and pdo_pgsql, which is already installed
      {{ $phpversion := trimPrefix "php:" .platformapp.type }}
      {{ if .platformapp.runtime.extensions }}
      {{ $phpextensions := without .platformapp.runtime.extensions "blackfire" "pdo_pgsql" "sodium" }}
      webimage_extra_packages:{{range $extension := $phpextensions }}
      - php{{$phpversion}}-{{$extension}}{{end}}
      {{ if has "sodium" .platformapp.runtime.extensions }}
      - php-sodium
      {{end}}
      {{ end }}
    
      # Add pip only if we have python3 dependencies
      {{ if .platformapp.dependencies.python3 }}
      - python3-pip
      {{ end }}
      EOF
    
      # Because "ENDOFHOOKS" is quoted here, no variable expansion occurs
      # so everything is left alone.
      cat <<-"ENDOFHOOKS" >>.ddev/config.platformsh.yaml
    
      hooks:
        post-start:
        - exec: platform self:update -qy --no-major || true

      {{ if eq .platformapp.build.flavor "composer" }}
        - composer: install
      {{ end }}

      {{ if .platformapp.hooks.build }}
        # platformsh build hooks
      {{ $noblanks := regexReplaceAll "\n\n*" .platformapp.hooks.build "\n" }}
        - exec: |
      {{ indent 6 $noblanks }}
      {{ end }}

      {{ if .platformapp.hooks.deploy }}
        # platformsh deploy hooks
      {{ $noblanks := regexReplaceAll "\n\n*" .platformapp.hooks.deploy "\n" }}
        - exec: |
      {{ indent 6 $noblanks }}
      {{ end }}

      {{ if .platformapp.hooks.post_deploy }}
        # platformsh post_deploy hooks
      {{ $noblanks := regexReplaceAll "\n\n*" .platformapp.hooks.post_deploy "\n" }}
        - exec: |
      {{ indent 6 $noblanks }}
      {{ end }}

      {{ if has "blackfire" .platformapp.runtime.extensions }}
        - exec: phpenmod blackfire
      {{ end }}

      ENDOFHOOKS

project_files:
  - web-build/Dockerfile.platformsh
  - homeadditions/.bashrc.d/platformsh-environment.sh
  - providers/platform.yaml

global_files:
  - commands/web/platform

post_install_actions:
# If redis is configured, do a ddev get to get it
- |
  #ddev-nodisplay
  {{ if and .services.cache.type (hasPrefix "redis" .services.cache.type) }}
  echo "Running 'ddev get drud/ddev-redis'"
  ddev get drud/ddev-redis
  {{ end }}
  {{ if and .services.cache.type (hasPrefix "memcached" .services.cache.type) }}
  echo "Running 'ddev get drud/ddev-memcached'"
  ddev get drud/ddev-memcached
  {{ end }}
  {{ if and .services.search.type (hasPrefix "elasticsearch" .services.search.type) }}
  echo "Running 'ddev get drud/ddev-elasticsearch'"
  ddev get drud/ddev-elasticsearch
  {{ end }}
  cat <<-ENDDOCKERFILE >> web-build/Dockerfile.platformsh
  {{ if .platformapp.dependencies.php }}{{ range $pkg, $version := .platformapp.dependencies.php }}{{ if ne $pkg "composer/composer" }}
  ENV COMPOSER_HOME=/usr/local/composer
  RUN echo  "export PATH=\${PATH}:\${COMPOSER_HOME}/vendor/bin" >/etc/bashrc/composerpath.bashrc
  RUN composer global require {{ $pkg }}{{ if ne $version "*" }}:{{ $version }}{{end}}{{end}}{{end}}
    {{ end }}

  {{ if .platformapp.dependencies.python3 }}
    {{ range $pkg, $version := .platformapp.dependencies.python3 }}
  RUN pip3 install {{ $pkg }}{{ if ne $version "*" }}=={{ $version }}{{end}}
    {{ end }}
  {{ end }}
  ENDDOCKERFILE

- | 
  #ddev-nodisplay
  cd ..
  unset DDEV_DEBUG
  project_type=$(ddev describe -j | jq -r .raw.type)
  case $project_type in 
    laravel)
      # TODO: This depends on perl, but we can't start the project unless these are created
      # so can't use ddev exec yet. 
      perl -p -e 's/DB_(HOST|DATABASE|USERNAME|PASSWORD)=(.*)/DB_\1=db/g' .env.example >.env
      perl -pi.bak -e "s#APP_URL=.*#APP_URL=${DDEV_PRIMARY_URL}#g" .env
      ;;
    drupal9)
      mkdir -p .drush
      ;;
  esac

yaml_read_files:
  platformapp: .platform.app.yaml
  services: .platform/services.yaml

